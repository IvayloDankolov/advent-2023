Leaving this here to document my shame


fn is_valid_prefix(states: &Vec<SpringState>, damaged_sequences: &Vec<usize>, total_len: usize) -> bool {

    let mut current_seq_length: usize = 0;
    let mut current_seq_id = 0;
    let mut found_smaller = false;

    let total = states.len();
    let max_sequences = damaged_sequences.len();

    for state in states {
        if *state == SpringState::Damaged {
            if current_seq_id >= max_sequences {
                return false;
            }
            current_seq_length += 1;
        } else {
            if current_seq_length > 0 {
                let target = damaged_sequences[current_seq_id];
                if current_seq_length < target {
                    if found_smaller {
                        return false;
                    }
                    found_smaller = true;
                } else if current_seq_length > target {
                    return false;
                }
                current_seq_length = 0;
                current_seq_id += 1;
            }
        }
    }

    if current_seq_length > 0 {
        let target = damaged_sequences[current_seq_id];
        if current_seq_length < target {
            if found_smaller {
                return false;
            }
            found_smaller = true;
        } else if current_seq_length > target {
            return false;
        }
        current_seq_length = 0;
        current_seq_id += 1;
    }

    if total == total_len && (found_smaller || current_seq_id < max_sequences) {
        return false;
    }

    return true;
}

fn debug_sequence(states: &Vec<SpringState>) -> String {
    states.iter().map(|state| match state {
        SpringState::Operational => ".",
        SpringState::Damaged => "#",
        SpringState::Unknown => "?"
    }).collect()
}
struct SearchStack {
    states: Vec<SpringState>,
    current_index: usize
}
fn possible_damaged_arrangements(row: &SpringRow) -> usize {
    println!("{} {}", debug_sequence(&row.states), row.damaged_sequences.iter().join(","));

    let total_len = row.states.len();

    let mut stack: Vec<SearchStack> = vec![];
    let mut count: usize = 0;
    let mut curr_sequence = vec![];

    let mut curr_index = 0;

    while is_valid_prefix(&curr_sequence, &row.damaged_sequences, total_len) && (curr_index < row.states.len() || stack.len() > 0) {
        // println!("{}: {} -> {}", curr_index, debug_sequence(&curr_sequence), count);
        let curr_state = row.states[curr_index];
        if curr_state == SpringState::Unknown {
            stack.push(SearchStack {
                states: curr_sequence.clone(),
                current_index: curr_index
            });
            curr_sequence.push(SpringState::Operational);
        } else {
            curr_sequence.push(curr_state);
        }

        loop {
            let sl = stack.len();
            let cl = curr_sequence.len();
            let valid = is_valid_prefix(&curr_sequence, &row.damaged_sequences, total_len);
            if sl == 0 {
                break;
            }

            if cl < total_len && valid {
                break;
            }

            if cl == total_len && valid {
                // println!("{}: {} -> {}", curr_index, debug_sequence(&curr_sequence), count);
                count += 1;
            }
            
            let stack_item = stack.pop().unwrap();
            curr_sequence = stack_item.states;
            curr_index = stack_item.current_index;
            
            curr_sequence.push(SpringState::Damaged);
        }

        curr_index += 1;
    }

    count
    
}